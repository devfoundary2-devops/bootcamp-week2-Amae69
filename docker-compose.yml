services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: shopmicro-postgres
    environment:
      POSTGRES_DB: shopmicro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopmicro-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: shopmicro-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopmicro-network

  # Backend API
  backend:
    build:
      context: ./backend
      target: development
    command: ["npm", "start"]  
    container_name: shopmicro-backend
    environment:
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/shopmicro
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shopmicro-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      target: development
    command: ["npm", "start"]
    container_name: shopmicro-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/usr/src/app
      - ./frontend/public:/usr/src/app/public
      - frontend_node_modules:/usr/src/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    stdin_open: true
    tty: true
    networks:
      - shopmicro-network

  # ML Recommendation Service
  ml-service:
    build:
      context: ./ml-service
      target: development
    container_name: shopmicro-ml-service
    environment:
      - FLASK_ENV=development
      - PORT=3002
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:3001
    ports:
      - "3002:3002"
    volumes:
      - ./ml-service:/usr/src/app
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shopmicro-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: shopmicro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - shopmicro-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: shopmicro-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - shopmicro-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: shopmicro-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - shopmicro-network

networks:
  shopmicro-network:
    driver: bridge
    name: shopmicro-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backend_node_modules:
  frontend_node_modules: